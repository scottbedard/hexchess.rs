import { describe, expect, test } from 'vitest'
import { Hexchess, index } from '../../src'

describe('rook', () => {
  test('white rook', () => {
    const result = Hexchess.parse('p/3/5/7/9/P4R5/11/11/11/11/11 w - 0 1').movesFrom('f6')

    expect(result[0]).toEqual({ from: index('f6'), promotion: null, to: index('f7') })
    expect(result[1]).toEqual({ from: index('f6'), promotion: null, to: index('f8') })
    expect(result[2]).toEqual({ from: index('f6'), promotion: null, to: index('f9') })
    expect(result[3]).toEqual({ from: index('f6'), promotion: null, to: index('f10') })
    expect(result[4]).toEqual({ from: index('f6'), promotion: null, to: index('f11') }) // <- f11 is hostile
    expect(result[5]).toEqual({ from: index('f6'), promotion: null, to: index('g6') })
    expect(result[6]).toEqual({ from: index('f6'), promotion: null, to: index('h6') })
    expect(result[7]).toEqual({ from: index('f6'), promotion: null, to: index('i6') })
    expect(result[8]).toEqual({ from: index('f6'), promotion: null, to: index('k6') })
    expect(result[9]).toEqual({ from: index('f6'), promotion: null, to: index('l6') })
    expect(result[10]).toEqual({ from: index('f6'), promotion: null, to: index('g5') })
    expect(result[11]).toEqual({ from: index('f6'), promotion: null, to: index('h4') })
    expect(result[12]).toEqual({ from: index('f6'), promotion: null, to: index('i3') })
    expect(result[13]).toEqual({ from: index('f6'), promotion: null, to: index('k2') })
    expect(result[14]).toEqual({ from: index('f6'), promotion: null, to: index('l1') })
    expect(result[15]).toEqual({ from: index('f6'), promotion: null, to: index('f5') })
    expect(result[16]).toEqual({ from: index('f6'), promotion: null, to: index('f4') })
    expect(result[17]).toEqual({ from: index('f6'), promotion: null, to: index('f3') })
    expect(result[18]).toEqual({ from: index('f6'), promotion: null, to: index('f2') })
    expect(result[19]).toEqual({ from: index('f6'), promotion: null, to: index('f1') })
    expect(result[20]).toEqual({ from: index('f6'), promotion: null, to: index('e5') })
    expect(result[21]).toEqual({ from: index('f6'), promotion: null, to: index('d4') })
    expect(result[22]).toEqual({ from: index('f6'), promotion: null, to: index('c3') })
    expect(result[23]).toEqual({ from: index('f6'), promotion: null, to: index('b2') })
    expect(result[24]).toEqual({ from: index('f6'), promotion: null, to: index('a1') })
    expect(result[25]).toEqual({ from: index('f6'), promotion: null, to: index('e6') })
    expect(result[26]).toEqual({ from: index('f6'), promotion: null, to: index('d6') })
    expect(result[27]).toEqual({ from: index('f6'), promotion: null, to: index('c6') })
    expect(result[28]).toEqual({ from: index('f6'), promotion: null, to: index('b6') })
    // a6 is friendly
  })

  test('black rook', () => {
    const result = Hexchess.parse('p/3/5/7/9/P4r5/11/11/11/11/11 b - 0 1').movesFrom('f6')

    expect(result[0]).toEqual({ from: index('f6'), promotion: null, to: index('f7') })
    expect(result[1]).toEqual({ from: index('f6'), promotion: null, to: index('f8') })
    expect(result[2]).toEqual({ from: index('f6'), promotion: null, to: index('f9') })
    expect(result[3]).toEqual({ from: index('f6'), promotion: null, to: index('f10') })
    // f11 is friendly
    expect(result[4]).toEqual({ from: index('f6'), promotion: null, to: index('g6') })
    expect(result[5]).toEqual({ from: index('f6'), promotion: null, to: index('h6') })
    expect(result[6]).toEqual({ from: index('f6'), promotion: null, to: index('i6') })
    expect(result[7]).toEqual({ from: index('f6'), promotion: null, to: index('k6') })
    expect(result[8]).toEqual({ from: index('f6'), promotion: null, to: index('l6') })
    expect(result[9]).toEqual({ from: index('f6'), promotion: null, to: index('g5') })
    expect(result[10]).toEqual({ from: index('f6'), promotion: null, to: index('h4') })
    expect(result[11]).toEqual({ from: index('f6'), promotion: null, to: index('i3') })
    expect(result[12]).toEqual({ from: index('f6'), promotion: null, to: index('k2') })
    expect(result[13]).toEqual({ from: index('f6'), promotion: null, to: index('l1') })
    expect(result[14]).toEqual({ from: index('f6'), promotion: null, to: index('f5') })
    expect(result[15]).toEqual({ from: index('f6'), promotion: null, to: index('f4') })
    expect(result[16]).toEqual({ from: index('f6'), promotion: null, to: index('f3') })
    expect(result[17]).toEqual({ from: index('f6'), promotion: null, to: index('f2') })
    expect(result[18]).toEqual({ from: index('f6'), promotion: null, to: index('f1') })
    expect(result[19]).toEqual({ from: index('f6'), promotion: null, to: index('e5') })
    expect(result[20]).toEqual({ from: index('f6'), promotion: null, to: index('d4') })
    expect(result[21]).toEqual({ from: index('f6'), promotion: null, to: index('c3') })
    expect(result[22]).toEqual({ from: index('f6'), promotion: null, to: index('b2') })
    expect(result[23]).toEqual({ from: index('f6'), promotion: null, to: index('a1') })
    expect(result[24]).toEqual({ from: index('f6'), promotion: null, to: index('e6') })
    expect(result[25]).toEqual({ from: index('f6'), promotion: null, to: index('d6') })
    expect(result[26]).toEqual({ from: index('f6'), promotion: null, to: index('c6') })
    expect(result[27]).toEqual({ from: index('f6'), promotion: null, to: index('b6') })
    expect(result[28]).toEqual({ from: index('f6'), promotion: null, to: index('a6') }) // <- a6 is hostile
  })
})
